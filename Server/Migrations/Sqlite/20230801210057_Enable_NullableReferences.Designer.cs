// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Remotely.Server.Data;

#nullable disable

namespace Remotely.Server.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20230801210057_Enable_NullableReferences")]
    partial class Enable_NullableReferences
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("DeviceGroupRemotelyUser", b =>
                {
                    b.Property<string>("DeviceGroupsID")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceGroupsID", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DeviceGroupRemotelyUser");
                });

            modelBuilder.Entity("DeviceGroupScriptSchedule", b =>
                {
                    b.Property<string>("DeviceGroupsID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScriptSchedulesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceGroupsID", "ScriptSchedulesId");

                    b.HasIndex("ScriptSchedulesId");

                    b.ToTable("DeviceGroupScriptSchedule");
                });

            modelBuilder.Entity("DeviceScriptRun", b =>
                {
                    b.Property<string>("DevicesID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScriptRunsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesID", "ScriptRunsId");

                    b.HasIndex("ScriptRunsId");

                    b.ToTable("DeviceScriptRun");
                });

            modelBuilder.Entity("DeviceScriptSchedule", b =>
                {
                    b.Property<string>("DevicesID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScriptSchedulesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesID", "ScriptSchedulesId");

                    b.HasIndex("ScriptSchedulesId");

                    b.ToTable("DeviceScriptSchedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("RemotelyUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Alert", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UserID");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ApiToken", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("ApiTokens");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.BrandingInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("ButtonForegroundBlue")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ButtonForegroundGreen")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ButtonForegroundRed")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<byte>("TitleBackgroundBlue")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TitleBackgroundGreen")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TitleBackgroundRed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TitleForegroundBlue")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TitleForegroundGreen")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TitleForegroundRed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.ToTable("BrandingInfos");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Device", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("CpuUtilization")
                        .HasColumnType("REAL");

                    b.Property<string>("CurrentUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceGroupID")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Drives")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Is64Bit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastOnline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MacAddresses")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OSArchitecture")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OSDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessorCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicIP")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerVerificationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalMemory")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalStorage")
                        .HasColumnType("REAL");

                    b.Property<double>("UsedMemory")
                        .HasColumnType("REAL");

                    b.Property<double>("UsedStorage")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("DeviceGroupID");

                    b.HasIndex("DeviceName");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.DeviceGroup", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("DeviceGroups");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.InviteLink", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateSent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvitedUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("InviteLinks");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Organization", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BrandingInfoId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefaultOrganization")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.SavedScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderPath")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("GenerateAlertOnError")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsQuickScript")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendEmailOnError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendErrorEmailTo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Shell")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationID");

                    b.ToTable("SavedScripts");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptResult", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorOutput")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HadErrors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InputType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("RunTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SavedScriptId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptInput")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScriptRunId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderConnectionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUserName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Shell")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StandardOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("SavedScriptId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ScriptRunId");

                    b.ToTable("ScriptResults");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Initiator")
                        .HasColumnType("TEXT");

                    b.Property<int>("InputType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RunAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RunOnNextConnect")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SavedScriptId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("SavedScriptId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScriptRuns");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NextRun")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RunOnNextConnect")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SavedScriptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationID");

                    b.ToTable("ScriptSchedules");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.SharedFile", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("FileContents")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("SharedFiles");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.RemotelyUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsServerAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TempPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserOptions")
                        .HasColumnType("TEXT");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UserName");

                    b.HasDiscriminator().HasValue("RemotelyUser");
                });

            modelBuilder.Entity("DeviceGroupRemotelyUser", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("DeviceGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.RemotelyUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceGroupScriptSchedule", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("DeviceGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.ScriptSchedule", null)
                        .WithMany()
                        .HasForeignKey("ScriptSchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceScriptRun", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.ScriptRun", null)
                        .WithMany()
                        .HasForeignKey("ScriptRunsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceScriptSchedule", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.ScriptSchedule", null)
                        .WithMany()
                        .HasForeignKey("ScriptSchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Alert", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Device", "Device")
                        .WithMany("Alerts")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("Alerts")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.RemotelyUser", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ApiToken", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("ApiTokens")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.BrandingInfo", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithOne("BrandingInfo")
                        .HasForeignKey("Remotely.Shared.Entities.BrandingInfo", "OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Device", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.DeviceGroup", "DeviceGroup")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceGroupID");

                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("Devices")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceGroup");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.DeviceGroup", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("DeviceGroups")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.InviteLink", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("InviteLinks")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.SavedScript", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.RemotelyUser", "Creator")
                        .WithMany("SavedScripts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("SavedScripts")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptResult", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Device", "Device")
                        .WithMany("ScriptResults")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("ScriptResults")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.SavedScript", "SavedScript")
                        .WithMany("ScriptResults")
                        .HasForeignKey("SavedScriptId");

                    b.HasOne("Remotely.Shared.Entities.ScriptSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Remotely.Shared.Entities.ScriptRun", "ScriptRun")
                        .WithMany("Results")
                        .HasForeignKey("ScriptRunId");

                    b.Navigation("Device");

                    b.Navigation("Organization");

                    b.Navigation("SavedScript");

                    b.Navigation("Schedule");

                    b.Navigation("ScriptRun");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptRun", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("ScriptRuns")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.SavedScript", "SavedScript")
                        .WithMany("ScriptRuns")
                        .HasForeignKey("SavedScriptId");

                    b.HasOne("Remotely.Shared.Entities.ScriptSchedule", "Schedule")
                        .WithMany("ScriptRuns")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Organization");

                    b.Navigation("SavedScript");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptSchedule", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.RemotelyUser", "Creator")
                        .WithMany("ScriptSchedules")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("ScriptSchedules")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.SharedFile", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("SharedFiles")
                        .HasForeignKey("OrganizationID");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.RemotelyUser", b =>
                {
                    b.HasOne("Remotely.Shared.Entities.Organization", "Organization")
                        .WithMany("RemotelyUsers")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Device", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("ScriptResults");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.DeviceGroup", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.Organization", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("ApiTokens");

                    b.Navigation("BrandingInfo");

                    b.Navigation("DeviceGroups");

                    b.Navigation("Devices");

                    b.Navigation("InviteLinks");

                    b.Navigation("RemotelyUsers");

                    b.Navigation("SavedScripts");

                    b.Navigation("ScriptResults");

                    b.Navigation("ScriptRuns");

                    b.Navigation("ScriptSchedules");

                    b.Navigation("SharedFiles");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.SavedScript", b =>
                {
                    b.Navigation("ScriptResults");

                    b.Navigation("ScriptRuns");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptRun", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.ScriptSchedule", b =>
                {
                    b.Navigation("ScriptRuns");
                });

            modelBuilder.Entity("Remotely.Shared.Entities.RemotelyUser", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("SavedScripts");

                    b.Navigation("ScriptSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
